//==========================================================================//
// Font Family Generator
// How to use: @include font-face($font-open-sans, 'fonts/open-sans.ttf', $font-weight-normal) {}
//==========================================================================//
// defaults to open sans and normal font weight
@mixin font-face( $family, $filepath, $weight:normal ) {
  @font-face {
      font-family: $family;
      src: url($filepath + '.eot');
      src: local('\263A'),
        url($filepath + '.eot#iefix') format('embedded-opentype'),
        url($filepath + '.woff') format('woff'),
        url($filepath + '.ttf') format('truetype'),
        url($filepath + '.svg#open_sansbold') format('svg');
      font-weight: $weight;
      font-style: normal;
  }
}

//==========================================================================//
// Transition/Trainsforms Mixin
// How to use: @include transition(type, length, easing)
//==========================================================================//
@mixin transitions( $type:all, $length:0.35s, $easing:ease-in-out ) {
    -moz-transition: $type $length $easing;
    -o-transition: $type $length $easing;
    -webkit-transition: $type $length $easing;
    transition: $type $length $easing;
}

//==========================================================================//
// Media Query Break Points
// How to use: @include media-query('tablet') {}
// How to use - chain multiple media queries: @include media-query( $breakpoints:('mobile', 'tablet') ) {}
//==========================================================================//
@mixin media-query($breakpoints) {

	@each $breakpoint in $breakpoints {

		// mobile break point
		@if $breakpoint == "mobile" {
			@media screen and (max-width: $tablet - 1px) {
				@content;
			}
		}
		// tablet break point
		@else if $breakpoint == "tablet" {
			@media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {
				@content;
			}
		}
		// desktop break point
        @else if $breakpoint == "desktop" {
            @media screen and (min-width: $desktop) {
				@content;
			}
		}
	}
}

//==========================================================================//
// Overrides Markup
// How to use: @include base-overrides() {}
// How to use: @include base-overrides($breakpoint) {}
//==========================================================================//
@mixin base-overrides($key: null) {
    $key: if($key, "#{$key}-", null);
    
    // loop directions (top, right, bottom, left, auto)
    @each $direction in $directions {
        // loop through each interval (5, 10, 15, etc)
        @each $distance in $distances {
            .#{$key}margin-#{$direction}-#{$distance}  {margin-#{$direction}: #{$distance}px !important;}
            .#{$key}padding-#{$direction}-#{$distance} {padding-#{$direction}: #{$distance}px !important;}     
        }
        // auto
        .#{$key}margin-#{$direction}-auto  {margin-#{$direction}: auto !important;} 
        .#{$key}padding-#{$direction}-auto {padding-#{$direction}: auto !important;}         
    } // END directions loop
    
    // set up rule for vertical/horizontal
    // allows for one CSS class rather than two
    @each $distance in $distances {
        .#{$key}margin-vertical-#{$distance}   {margin-top: #{$distance}px !important; margin-bottom: #{$distance}px !important;}
        .#{$key}margin-horizontal-#{$distance} {margin-left: #{$distance}px !important; margin-right: #{$distance}px !important;}
        
        .#{$key}padding-vertical-#{$distance}   {padding-top: #{$distance}px !important; padding-bottom: #{$distance}px !important;}
        .#{$key}padding-horizontal-#{$distance} {padding-left: #{$distance}px !important; padding-right: #{$distance}px !important;}     
    } // END distance loop
}

