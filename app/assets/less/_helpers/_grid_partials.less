//==========================================================================//
// Semantic Grid Variables
//==========================================================================//
// allow grid to be build - turn these off to disable grid
@unsemantic-grid--reset: true;
@unsemantic-grid--build: true;

// allow creation of grid wrappers 
@unsemantic-grid-container-scope: true;

// allow left/margin-left push/pull mechanics
@unsemantic-prefix-suffix-support: true;
@unsemantic-push-pull-support: true;

// spacing variables
@container-max-width: 1200px;
@gutter-half: 10px;
@container-gutter: @gutter-half;
@lang-forward: left;
@lang-reverse: right;

//==========================================================================//
// Semantic Grid Mixins
//==========================================================================//

// ===========
// Responsive Grid Loop
// Dependency: @param - @cssBreakpointsMedia
// ===========
.unsemantic-grid--build(@i: length(@cssBreakpointsMedia)) when (@i > 0) and (@unsemantic-grid--build = true) {
    // counter
    .unsemantic-grid--build(@i - 1);

    // get key from variable array
    @key: e(extract(extract(@cssBreakpointsMedia, @i),1));
    @value: e(extract(extract(@cssBreakpointsMedia, @i),2));

    @media @value {
        .if-scope(@key);

        // default grid
        .if-scope(@condition) when (@condition = tablet-and-up) {
            .unsemantic-grid--scope();
        }

        // responsive grid
        .if-scope(@condition) when not (@condition = tablet-and-up) {
            .unsemantic-grid--scope(@key);
        }
    }
}

// ===========
// Resets grid
// ===========
.unsemantic-grid--reset() when (@unsemantic-grid--reset = true) {
    
    .unsemantic-grid--cascade (@i: 1, @num: 5, @gridCount: 20, @scope: ~'') when (@i =< @gridCount) {
        @key: @scope;
        @setNum: (@i * @num);
        
        // set grid key   
        @gridClass: ~'@{scope}grid-@{setNum}';

        //Extend loop
        .@{gridClass} {
            .extender() when (@i > 0) {
                &:extend(.unsemantic-grid-all all);
                &:before,
                &:after {
                    .if-mobile(@key);
                    .if-mobile(@condition) when (@condition = mobile-), (@condition = ~'') {
                        &:extend(.unsemantic-grid-all-clearfix all);
                        
                    }
                }

            }
            .extender();
        }

        // counter
        // Dev note: Variable scope is set here. Setting it at .unsemantic-grid--cascade() init does nothing
        //           Example: @scope being assigned to @key updates the .extender() mixin.
        .unsemantic-grid--cascade(@i + 1, @num, @gridCount, @scope: @key);
    }

    // build grid 5-95
    .unsemantic-grid--cascade();
    // build grid 33, 66
    .unsemantic-grid--cascade(@num: 33, @gridCount: 2);

    // responsive mixin
    .each-device(@i: length(@cssBreakpoints)) when (@i > 0) and (@cssBreakpoints) {
        // counter
        .each-device(@i - 1);

        // get key from variable array
        @key: e(extract(extract(@cssBreakpoints, @i),1));

        // run grid builder
        .unsemantic-grid--cascade(@scope: ~'@{key}-'); // 5-95
        .unsemantic-grid--cascade(@num: 33, @gridCount: 2, @scope: ~'@{key}-'); // 33, 66
    }
    .each-device();

    // generate default :extend classes
    .unsemantic-grid-extend--all();
    .unsemantic-grid-extend--clearfix();
}

// ===========
// Determines if prefix scope variable will be added in front of grid parts
// ===========
.unsemantic-grid--scope(@SCOPE: null) when (@unsemantic-grid--build = true) {
    @scope: ~'';

    // If @SCOPE is NOT set
    // generates: .grid-100, .pull-50
    .unsemantic-grid--builder() when (@SCOPE = null) {

        // build grid-based system - must come first
        .unsemantic-grid--builder(@scope);

        // grid-wrapper markup
        .unsemantic-grid--container(@scope);
    }

    // If @SCOPE is set
    // generates: .tablet-grid-100, .desktop-pull-50
    .unsemantic-grid--builder() when not (@SCOPE = null) {
        @scope: ~'@{SCOPE}-';

        // build grid-based system - must come first
        .unsemantic-grid--builder(@scope);

        // grid-wraper markup - only runs if variable is set to true
        .if-set(@unsemantic-grid-container-scope);
        .if-set(@condition) when (@condition = true) {
            .unsemantic-grid--container(@scope);
        }
    }

    // run unsemantic-grid--builder()
    .unsemantic-grid--builder();
}

// ===========
// Generates grid containers
// ===========
.unsemantic-grid--container(@scope) {

    // container
    .@{scope}grid-container {
        margin-left: auto;
        margin-right: auto;
        &:before,
        &:after {
            .unsemantic-clearfix();
        }
    
        // set max-width
        .if-unsemantic-container-max-width(@container-max-width);
        .if-unsemantic-container-max-width(@condition) when not (@condition = ~'') {
            max-width: @container-max-width;
        }

        // include gutters
        .unsemantic-container-gutter(@container-gutter);

    }

    // Offset the left/right margin of an
    // element that contains grid units.
    .@{scope}grid-offset {
        clear: both;

        // clearfix
        &:before,
        &:after {
            .unsemantic-clearfix();
        }

        // add gutters
        .unsemantic-gutter-half-margin();
    }

    // remove padding, if it's being used as a parent for other grid columns.
    .@{scope}grid-parent {
        padding-left: 0;
        padding-right: 0;
    }

    // hide whole container on desktop/tablet/mobile-hide
    .if-hide(@scope);
    .if-hide(@condition) when (@condition = ~'') {
        .desktop-hide,
        .desktop-hidden {
            display: none !important;
        }
    }

    .if-hide(@condition) when not (@condition = ~'') {
        .@{scope}hide,
        .@{scope}hidden {
            display: none !important;
        }
    }

}

// ===========
// generates the css markup for the grid
// example: .grid-50, .mobile-grid-100, .tablet-grid-50, .desktop-grid-100
// ===========
.unsemantic-grid--builder(@scope) {

    // For 5 through 95 percent.
    .unsemantic-grid--builder-fifth(@scope);
    .unsemantic-grid--builder-fifth(@scope, @i: 19) when (@i > 0) {
        // counter
        .unsemantic-grid--builder-fifth(@scope, @i - 1);
        
        // variables
        @num: @i * 5;
        @decimal: (@num / 100);
        @percent: (@num * 1%);

        // generate grid system
        .@{scope}grid-@{num} {
            float: @lang-forward;
            width: @percent;
        }

        // prefix/suffix support
        .if-unsemantic-suffix-prefix-support(@unsemantic-prefix-suffix-support, @scope, @num, @percent);

        // push/pull support
        .if-unsemantic-push-pull-support(@unsemantic-push-pull-support, @scope, @num, @percent);
    }

    // For one-third and two-thirds.
    .unsemantic-grid--builder-third(@scope);
    .unsemantic-grid--builder-third(@scope, @i: 2) when (@i > 0) {
        // counter
        .unsemantic-grid--builder-third(@scope, @i - 1);
        
        // variables
        @num: (@i * 33);
        @one-third: (1 / 3);
        @decimal: (@i * @one-third);
        @percent: (@num + @decimal) * 1%;

        // generate grid system
        .@{scope}grid-@{num} {
            float: @lang-forward;
            width: @percent;
        }

        // prefix/suffix support
        .if-unsemantic-suffix-prefix-support(@unsemantic-prefix-suffix-support, @scope, @num, @percent);

        // push/pull support
        .if-unsemantic-push-pull-support(@unsemantic-push-pull-support, @scope, @num, @percent);
    }

    // Full width, just line-break.
    .@{scope}grid-100 {
        clear: both;
        width: 100%;
    }
}
// ============================================//

// Grid Components/Mixin Builders
// ============================================//
// clearfix for :before/:after psuedo classes
.unsemantic-clearfix() {
    content: ".";
    display: block;
    overflow: hidden;
    visibility: hidden;
    font-size: 0;
    line-height: 0;
    width: 0;
    height: 0;
}

// full clear
.unsemantic-clear() {
    clear: both;
}

.grid-columns-all() {
    box-sizing: border-box;

    // add gutters
    .unsemantic-container-gutter(@container-gutter);

    // clearfix
    &:before,
    &:after {
        .unsemantic-clearfix();
    }
}

// include gutters if variable is set
.unsemantic-container-gutter(@condition) when not (@condition = ~'') {
    padding-left: @container-gutter;
    padding-right: @container-gutter;
}

// set gutter with positive padding
.unsemantic-gutter-half() {
    padding-left: @gutter-half;
    padding-right: @gutter-half;
}

// set gutter with negative margin
.unsemantic-gutter-half-margin() {
    margin-left: -1 * @gutter-half;
    margin-right: -1 * @gutter-half;
}

// prefix/suffix markup generation
.if-unsemantic-suffix-prefix-support(@condition, @scope, @num, @percent) when (@condition = true) {
    // Prefix, to add extra columns before.
    .@{scope}prefix-@{num} {
        margin-@{lang-forward}: @percent;
    }

    // Suffix, to add extra columns after.
    .@{scope}suffix-@{num} {
        margin-@{lang-reverse}: @percent;
    }
}

// push/pull markup generation
.if-unsemantic-push-pull-support(@condition, @scope, @num, @percent) when (@condition = true) {
    // Push columns forward.
    .@{scope}push-@{num} {
        @{lang-forward}: @percent;
    }

    // Pull columns backward.
    .@{scope}pull-@{num} {
        @{lang-forward}: (@percent * -1);
    }
}

// :extend markup - used to place styles on all grid styles at once
.unsemantic-grid-extend--all() {
    .unsemantic-grid-all {
        position: relative;
        box-sizing: border-box;
        .unsemantic-container-gutter(@container-gutter);
    }
}

.unsemantic-grid-extend--clearfix() {
    .unsemantic-grid-all-clearfix {
        .unsemantic-clearfix();
    }
}
