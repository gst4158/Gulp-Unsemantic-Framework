//==========================================================================//
// Semantic Grid Variables
//==========================================================================//
@unsemantic-prefix-suffix-support: true;
@unsemantic-push-pull-support: true;
@unsemantic-grid-container-scope: true;
@container-max-width: 1200px;
@gutter-half: 10px;
@container-gutter: @gutter-half;
@lang-forward: left;
@lang-reverse: right;

//==========================================================================//
// Semantic Grid Mixins
//==========================================================================//

// ===========
// Forces a reset on all grid sizes
// ===========
.unsemantic-grid-reset();

// ===========
// Determines if prefix scope variable will be added in front of grid parts
// ===========
.unsemantic-grid(@SCOPE: null) {
    @scope: ~'';

    // If @SCOPE is NOT set
    // generates: .grid-100, .pull-50
    .grid-builder() when (@SCOPE = null) {

        // build grid-based system - must come first
        .unsemantic-grid-builder(@scope);

        // grid-wrapper markup
        .unsemantic-grid-container(@scope);
    }

    // If @SCOPE is set
    // generates: .tablet-grid-100, .desktop-pull-50
    .grid-builder() when not (@SCOPE = null) {
        @scope: ~'@{SCOPE}-';

        // build grid-based system - must come first
        .unsemantic-grid-builder(@scope);

        // grid-wraper markup - only runs if variable is set to true
        .if-set(@unsemantic-grid-container-scope);
        .if-set(@condition) when (@condition = true) {
            .unsemantic-grid-container(@scope);
        }
    }

    // run grid-builder()
    .grid-builder();
}

// ===========
// Generates grid containers
// ===========
.unsemantic-grid-container(@scope) {

    // container
    .@{scope}grid-container {
        margin-left: auto;
        margin-right: auto;
        &:before,
        &:after {
            .unsemantic-clearfix();
        }
    
        // set max-width
        .if-unsemantic-container-max-width(@container-max-width);
        .if-unsemantic-container-max-width(@condition) when not (@condition = ~'') {
            max-width: @container-max-width;
        }

        // include gutters
        .unsemantic-container-gutter(@container-gutter);

    }

    // Offset the left/right margin of an
    // element that contains grid units.
    .@{scope}grid-offset {
        clear: both;

        // clearfix
        &:before,
        &:after {
            .unsemantic-clearfix();
        }

        // add gutters
        .unsemantic-gutter-half-margin();
    }

    // remove padding, if it's being used as a parent for other grid columns.
    .@{scope}grid-parent {
        padding-left: 0;
        padding-right: 0;
    }

    // hide whole container on desktop/tablet/mobile-hide
    .@{scope}hide,
    .@{scope}hidden {
        display: none !important;
    }
}

// ===========
// generates the css markup for the grid
// example: .grid-50, .mobile-grid-100, .tablet-grid-50, .desktop-grid-100
// ===========
.unsemantic-grid-builder(@scope) {

    // For 5 through 95 percent.
    .unsemantic-grid-builder-fifth(@scope);
    .unsemantic-grid-builder-fifth(@scope, @i: 19) when (@i > 0) {
        // counter
        .unsemantic-grid-builder-fifth(@scope, @i - 1);
        
        // variables
        @num: @i * 5;
        @decimal: (@num / 100);
        @percent: (@num * 1%);

        // generate grid system
        .@{scope}grid-@{num} {
            float: @lang-forward;
            width: @percent;
        }

        // prefix/suffix support
        .if-unsemantic-suffix-prefix-support(@unsemantic-prefix-suffix-support, @scope, @num, @percent);

        // push/pull support
        .if-unsemantic-push-pull-support(@unsemantic-push-pull-support, @scope, @num, @percent);
    }

    // For one-third and two-thirds.
    .unsemantic-grid-builder-third(@scope);
    .unsemantic-grid-builder-third(@scope, @i: 2) when (@i > 0) {
        // counter
        .unsemantic-grid-builder-third(@scope, @i - 1);
        
        // variables
        @num: (@i * 33);
        @one-third: (1 / 3);
        @decimal: (@i * @one-third);
        @percent: (@num + @decimal) * 1%;

        // generate grid system
        .@{scope}grid-@{num} {
            float: @lang-forward;
            width: @percent;
        }

        // prefix/suffix support
        .if-unsemantic-suffix-prefix-support(@unsemantic-prefix-suffix-support, @scope, @num, @percent);

        // push/pull support
        .if-unsemantic-push-pull-support(@unsemantic-push-pull-support, @scope, @num, @percent);
    }

    // Full width, just line-break.
    .@{scope}grid-100 {
        clear: both;
        width: 100%;
    }
}
// ============================================//

// Grid Components/Mixin Builders
// ============================================//

// resets all grid pairs
.unsemantic-grid-reset() {
    .grid-5,
    .grid-33,
    .grid-66,
    .mobile-grid-5,
    .mobile-grid-33,
    .mobile-grid-66,
    .tablet-grid-5,
    .tablet-grid-33,
    .desktop-grid-66,
    .desktop-grid-33,
    .desktop-grid-66 {
        position: relative;
        box-sizing: border-box;
        .unsemantic-container-gutter(@container-gutter);
    }
    
    .grid-builder-all (@i: 1, @num: (@i * 5), @columnCount: 20) when (@i =< @columnCount) {
        //we are going to use this class twice, so just calculate it once
        @gridClass: ~'grid-@{num}';
    
        //this is your extender feature, which does not do so for the initial .grid_1
        //which was set above as our launch point.
        .@{gridClass} {
            .extender() when (@i > 1) {
                &:extend(.grid-5 all);
            }
            .extender();
        }
    
        // responsive states - we can't use variables here b/c less doesn't let you use variables with extends
        .mobile-@{gridClass} {
            .extender() when (@i > 1) {
                &:extend(.mobile-grid-5 all);
            }
            .extender();
        }
        .tablet-@{gridClass} {
            .extender() when (@i > 1) {
                &:extend(.tablet-grid-5 all);
            }
            .extender();
        }
        .desktop-@{gridClass} {
            .extender() when (@i > 1) {
                &:extend(.desktop-grid-5 all);
            }
            .extender();
        }
    
        //iterate the loop just as you were doing
        .grid-builder-all(@i + 1);
    }
    //call the loop starting at 1
    .grid-builder-all();
}

// clearfix for :before/:after psuedo classes
.unsemantic-clearfix() {
    content: ".";
    display: block;
    overflow: hidden;
    visibility: hidden;
    font-size: 0;
    line-height: 0;
    width: 0;
    height: 0;
}

// full clear
.unsemantic-clear() {
    clear: both;
}

.grid-columns-all() {
    box-sizing: border-box;

    // add gutters
    .unsemantic-container-gutter(@container-gutter);

    // clearfix
    &:before,
    &:after {
        .unsemantic-clearfix();
    }
}

// include gutters if variable is set
.unsemantic-container-gutter(@condition) when not (@condition = ~'') {
    padding-left: @container-gutter;
    padding-right: @container-gutter;
}

// set gutter with positive padding
.unsemantic-gutter-half() {
    padding-left: @gutter-half;
    padding-right: @gutter-half;
}

// set gutter with negative margin
.unsemantic-gutter-half-margin() {
    margin-left: -1 * @gutter-half;
    margin-right: -1 * @gutter-half;
}

// prefix/suffix markup generation
.if-unsemantic-suffix-prefix-support(@condition, @scope, @num, @percent) when (@condition = true) {
    // Prefix, to add extra columns before.
    .@{scope}prefix-@{num} {
        margin-@{lang-forward}: @percent;
    }

    // Suffix, to add extra columns after.
    .@{scope}suffix-@{num} {
        margin-@{lang-reverse}: @percent;
    }
}

.if-unsemantic-push-pull-support(@condition, @scope, @num, @percent) when (@condition = true) {
    // Push columns forward.
    .@{scope}push-@{num} {
        @{lang-forward}: @percent;
    }

    // Pull columns backward.
    .@{scope}pull-@{num} {
        @{lang-forward}: (@percent * -1);
    }
}
